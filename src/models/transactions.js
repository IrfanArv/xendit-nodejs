'use strict'
const { Model } = require('sequelize')
module.exports = (sequelize, DataTypes) => {
    class transactions extends Model {
        /**
         * Helper method for defining associations.
         * This method is not a part of Sequelize lifecycle.
         * The `models/index` file will call this method automatically.
         */
        static associate(models) {
            // define association here
        }
    }
    transactions.init(
        {
            id: {
                type: DataTypes.STRING,
                primaryKey: true,
                allowNull: false,
            },
            number_invoice: DataTypes.STRING,
            userId: DataTypes.STRING,
            receiverName: DataTypes.STRING,
            receiverPhone: DataTypes.STRING,
            namePlace: DataTypes.STRING,
            typeAddr: DataTypes.STRING,
            addrText: DataTypes.TEXT,
            desc: DataTypes.TEXT,
            administrativeAreaLevel4: DataTypes.STRING,
            administrativeAreaLevel3: DataTypes.STRING,
            administrativeAreaLevel2: DataTypes.STRING,
            administrativeAreaLevel1: DataTypes.STRING,
            postalCode: DataTypes.STRING,
            lat: DataTypes.STRING,
            lng: DataTypes.STRING,
            channelCode: DataTypes.STRING,
            channelFee: DataTypes.STRING,
            voucherId: DataTypes.STRING,
            voucherName: DataTypes.STRING,
            voucherCode: DataTypes.STRING,
            typeVoucher: DataTypes.STRING,
            diskonType: DataTypes.STRING,
            diskonNominal: DataTypes.INTEGER,
            voucherNominal: DataTypes.INTEGER,
            pointNominal: DataTypes.INTEGER,
            totalPayment: DataTypes.INTEGER,
            sellerId: DataTypes.STRING,
            sellerName: DataTypes.STRING,
            sellerLocation: DataTypes.STRING,
            shippingType: DataTypes.STRING,
            courierId: DataTypes.STRING,
            courierName: DataTypes.STRING,
            courierCost: DataTypes.INTEGER,
            courierInsurance: DataTypes.INTEGER,
            courierEstimation: DataTypes.STRING,
            totalQty: DataTypes.INTEGER,
            totalWeight: DataTypes.INTEGER,
            flagStatus: DataTypes.STRING,
            deliveryStatus: DataTypes.STRING,
            desc_order: DataTypes.TEXT,
            date_order: DataTypes.STRING,
            desc_paid: DataTypes.TEXT,
            date_paid: DataTypes.TEXT,
            desc_confirm: DataTypes.TEXT,
            date_confirm: DataTypes.STRING,
            desc_processed: DataTypes.TEXT,
            date_processed: DataTypes.STRING,
            desc_request_pickup: DataTypes.TEXT,
            date_request_pickup: DataTypes.STRING,
            desc_courier_found: DataTypes.TEXT,
            date_courier_found: DataTypes.STRING,
            desc_courier_pickup: DataTypes.TEXT,
            date_courier_pickup: DataTypes.STRING,
            desc_courier_on_way: DataTypes.TEXT,
            date_courier_on_way: DataTypes.STRING,
            desc_courier_trouble: DataTypes.TEXT,
            date_courier_trouble: DataTypes.STRING,
            desc_courier_arrived: DataTypes.TEXT,
            date_courier_arrived: DataTypes.STRING,
            desc_complain: DataTypes.TEXT,
            date_complain: DataTypes.STRING,
            desc_refund: DataTypes.TEXT,
            date_refund: DataTypes.STRING,
            totalReal: DataTypes.INTEGER,
            totalFeeCocoro: DataTypes.INTEGER,
            flagTransaction: DataTypes.STRING,
            ppobType: DataTypes.STRING,
            inquiryObject: DataTypes.TEXT,
            inquiryId: DataTypes.INTEGER,
            totalPrice: DataTypes.INTEGER,
            totalWithDraw: DataTypes.INTEGER,
            isFlashSale: DataTypes.INTEGER,
            ppobName: DataTypes.STRING,
            refId: DataTypes.STRING,
            referenceId: DataTypes.STRING,
            sellerAddressesId: DataTypes.STRING,
            typeDelivery: DataTypes.STRING,
            codePickup: DataTypes.STRING,
            flagChannelFee: DataTypes.STRING,
            device: DataTypes.STRING,
            createdAt: DataTypes.DATE,
            updatedAt: DataTypes.DATE,
        },
        {
            sequelize,
            modelName: 'transactions',
        },
    )
    return transactions
}
